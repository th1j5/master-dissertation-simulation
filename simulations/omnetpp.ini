[General]
# sim-time-limit = 1s
**.ipv4.arp.typename = "GlobalArp"

[static]
extends = Wifi_4G_country1, IPv4AddressAssignment

[U-Sphere]
extends = Wifi_4G_country1
**.hasIpv4 = false
**.hasIpv6 = false
**.hasGn = true
**.generic.typename = "UniSphereDataPlane" # automatic: hasUnisphere = true
#**.adjacencyManager.typename = ""
#*.configurator.typename = "NextHopNetworkConfigurator"
#*.configurator.addStaticRoutes = false

[Wifi_4G_min_test]
extends = End2EndApplication, WirelessParams, MobilityParams, VisualizationParams
network = Wifi_4G_min_test
*.numUsers = 1
*.numHomes = 4
**.pppg*.channel.delay = 0.2s
**.locChangingStrategy = "end2end" # end2end, ID, TTR # (Transient Triangular Routing)
*.configurator.config = xmldoc("hierarchical_DHCP_2.xml")

[Wifi_4G_medium]
extends = End2EndApplication, WirelessParams, MobilityParams, VisualizationParams
network = Wifi_4G_medium
*.numUsers = 1
**.pppg*.channel.delay = 0.2s
**.locChangingStrategy = "end2end" # end2end, ID, TTR # (Transient Triangular Routing)
*.configurator.config = xmldoc("hierarchical_DHCP_medium.xml")
**.wlan[*].radio.transmitter.communicationRange = 10m

[Wifi_4G_street]
extends = End2EndApplication, WirelessParams, MobilityParams_street, VisualizationParams
network = Wifi_4G_street
*.numUsers = 1
*.numHomes = 4
**.pppg*.channel.delay = 0.01s
**.locChangingStrategy = "end2end" # end2end, ID, TTR # (Transient Triangular Routing)
*.configurator.config = xmldoc("hierarchical_DHCP_street.xml")
*.mobileTower[*].wlan[*].radio.transmitter.communicationRange = 200m
*.users[*].wlan[*].radio.transmitter.communicationRange = 200m
**.wlan[*].radio.transmitter.communicationRange = 20m

[Wifi_4G_country1]
extends = End2EndApplication, WirelessParams, MobilityParams_country, VisualizationParams
network = Wifi_4G_country1
*.numUsers = 1
*.numHomesPerStreet = 4
*.numStreetsPerCity = 3
*.numCities = 2
**.pppg*.channel.delay = 0.01s
**.locChangingStrategy = "end2end" # end2end, ID, TTR # (Transient Triangular Routing)
#*.configurator.config = xmldoc("country.xml")
*.mobileTower[*].wlan[*].radio.transmitter.communicationRange = 200m
*.users[*].wlan[*].radio.transmitter.communicationRange = 200m
**.wlan[*].radio.transmitter.communicationRange = 20m


[End2EndApplication]
*.users[*].numApps = 1 # number of applications on clients
*.users[0].app[0].localPort = 5000 # destination port
*.users[0].app[0].destAddresses = "server"
*.users[*].app[0].destPort = 6000
*.users[*].app[0].messageLength = 100B
*.users[*].app[0].sendInterval = 10s
*.users[*].app[0].startTime = 0s # Important! Otherwise, it start only after sendInterval (no idea why, to debug)
*.users[*].app[0].packetName = "UDPData-client"
*.server.numApps = 1 # number of applications on server
*.server.app[0].typename = "UdpBasicConnectionApp" # server application type
*.server.app[0].localPort = 6000 # destination port
*.server.app[0].destAddresses = "users[*]"
*.server.app[0].destPort = 5000
*.server.app[0].messageLength = 100B
*.server.app[0].sendInterval = 0.01s
**.hasUdp = true # always enable UDP

[IPv4AddressAssignment]
#**.adjacencyManager.routingTableModule = "^.ipv4.routingTable"
#**.unisphere.routingTableModule = "^.ipv4.routingTable"
*.*.*.routingTableModule = "^.ipv4.routingTable"
*.configurator.typename = "Ipv4NetworkConfigurator"
*.configurator.addStaticRoutes = true
# **.routingTable.netmaskRoutes = ""
*.configurator.dumpRoutes = false
*.configurator.dumpTopology = false
*.configurator.assignDisjunctSubnetAddresses = true
# AdjMgmt server in routers
# AdjMgmt in hosts
*.users[*].adjacencyManager.getLocInterval = 0.1s
# FIXME: delay for none-overlap.
# This fixes the fact that DHCP packets are dropped at the radio due to almost same arrival time
# could this be solved by changing AckingWirelessInterface? Or let DHCP be more robust...

[WirelessParams]
extends = WirelessParamsBasic
**.wlan[*].radio.transmitter.communicationRange = 80m

[MobilityParams]
extends = MobilityParamsBasic
*.homes[*].**.initialY = 100m
*.homes[0].**.initialX = 100m
*.homes[1].**.initialX = 150m
*.homes[2].**.initialX = 200m
*.homes[3].**.initialX = 250m
*.homes[4].**.initialX = 300m
**.initFromDisplayString = false

*.users[*].mobility.typename = "LinearMobility"
*.users[*].**.initialY = 150m + uniform(-20m,20m)
**.mobility.speed = 25mps
#**.mobility.initialMovementHeading = 180deg*intuniform(0,1)
**.mobility.initialMovementHeading = 0deg

[MobilityParams_street]
extends = MobilityParamsBasic
*.users[*].**.initialY = 215m
*.users[*].**.initialX = 100m
*.homes[*].mobility.typename = "StaticGridMobility"
*.homes[*].mobility.numHosts = 4 #FIXME: same as *.numHomes
*.homes[*].mobility.columns = 4
*.homes[*].mobility.constraintAreaMinX = 100m
*.homes[*].mobility.constraintAreaMaxX = 200m
*.homes[*].mobility.constraintAreaMinY = 180m
*.homes[*].mobility.constraintAreaMaxY = 181m
*.homes1[*].mobility.typename = "StaticGridMobility"
*.homes1[*].mobility.numHosts = 4 #FIXME: same as *.numHomes
*.homes1[*].mobility.columns = 4
*.homes1[*].mobility.constraintAreaMinX = 80m
*.homes1[*].mobility.constraintAreaMaxX = 180m
*.homes1[*].mobility.constraintAreaMinY = 230m
*.homes1[*].mobility.constraintAreaMaxY = 231m
*.mobileTower[*].mobility.typename = "StaticGridMobility"
*.mobileTower[*].mobility.numHosts = 2 #FIXME
*.mobileTower[*].mobility.columns = 1
*.mobileTower[*].mobility.constraintAreaMinX = 199m
*.mobileTower[*].mobility.constraintAreaMaxX = 201m
*.mobileTower[*].mobility.constraintAreaMinY = -100m # FIXME
*.mobileTower[*].mobility.constraintAreaMaxY = 500m
**.initFromDisplayString = false

*.users[*].mobility.typename = "LinearMobility"
**.mobility.speed = 25mps
**.mobility.initialMovementHeading = 0deg

[MobilityParams_country]
extends = MobilityParamsBasic
*.users[*].**.initialY = 215m
*.users[*].**.initialX = 100m
*.testStreet.h*.mobility.typename = "StaticGridMobility"
*.testStreet.h*.mobility.numHosts = 4 #FIXME: same as *.numHomes
*.testStreet.h*.mobility.columns = 4
*.testStreet.h*.mobility.constraintAreaMinX = 100m
*.testStreet.h*.mobility.constraintAreaMaxX = 200m
*.testStreet.h*.mobility.constraintAreaMinY = 200m
*.testStreet.h*.mobility.constraintAreaMaxY = 201m
*.mobileTower[*].mobility.typename = "StaticGridMobility"
*.mobileTower[*].mobility.numHosts = 2 #FIXME
*.mobileTower[*].mobility.columns = 1
*.mobileTower[*].mobility.constraintAreaMinX = 199m
*.mobileTower[*].mobility.constraintAreaMaxX = 201m
*.mobileTower[*].mobility.constraintAreaMinY = -100m # FIXME
*.mobileTower[*].mobility.constraintAreaMaxY = 500m
**.initFromDisplayString = false

*.users[*].mobility.typename = "LinearMobility"
**.mobility.speed = 25mps
**.mobility.initialMovementHeading = 0deg

[WirelessParamsBasic]
# radio
**.wlan[*].typename = "AckingWirelessInterface" # "WirelessInterface"
# shortcutmac doesn't work, because physical properties like distance NEED to be checked
**.wlan[*].mac.useAck = true 											# https://inet.omnetpp.org/docs/tutorials/wireless/doc/step1.html
**.wlan[*].mac.fullDuplex = true
**.wlan[*].bitrate = 100000000 Mbps
**.wlan[*].mac.ackTimeout = 300ms
**.radio.typename = "UnitDiskRadio" # do we want to set this?
**.wlan[*].radio.receiver.ignoreInterference = true

*.radioMedium.rangeFilter = 'communicationRange' # enhance scalibility - doens't seem to work
*.radioMedium.macAddressFilter = true # enhance scalibility by only sending to intended recipients

[MobilityParamsBasic]
**.constraintAreaMinX = 0m
**.constraintAreaMaxX = 400m
**.constraintAreaMinY = 0m
**.constraintAreaMaxY = 400m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxZ = 0m

[VisualizationParams]
*.visualizer.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.mobilityVisualizer.displayPositions = true
*.visualizer.mobilityVisualizer.displayOrientations = true
*.visualizer.mobilityVisualizer.displayVelocities = false
*.visualizer.mobilityVisualizer.displayMovementTrails = false

*.visualizer.mediumVisualizer.displaySignals = false
*.visualizer.dataLinkVisualizer.displayLinks = false
*.visualizer.physicalLinkVisualizer.displayLinks = false
*.visualizer.networkRouteVisualizer.displayRoutes = true
*.visualizer.*LinkVisualizer.lineShift = 0
*.visualizer.networkRouteVisualizer.lineShift = 0
*.visualizer.*Visualizer.packetFilter = "not (assignLoc*)"

*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.interfaceTableVisualizer.nodeFilter = "not (*switch* or *Switch* or *AP*)"
**.interfaceTable.displayAddresses = false

*.visualizer.routingTableVisualizer.typename = ""
*.visualizer.routingTableVisualizer.displayRoutingTables = true
*.visualizer.routingTableVisualizer.destinationFilter = "users[0]"
*.visualizer.routingTableVisualizer.lineShiftMode = "none"
