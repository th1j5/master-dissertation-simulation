[General]
#debug-on-errors = true
# **.networkConfiguratorModule = "" # disable networkconfigurator
**.ipv4.arp.typename = "GlobalArp"

[Prototype4GWifi]
network = Prototype4GWifi
*.numUsers = 3
*.numRoutersAlongPath = 5

[PrototypeLargeMedium]
network = Prototype4GWifiMedium
*.numUsers = 4

[PrototypeNetwork]
extends = Prototype4GWifi
# extends = PrototypeLargeMedium

[End2EndApplication]
extends = PrototypeNetwork
*.users[*].numApps = 1 # number of applications on clients
*.users[*].app[0].typename = "UdpBasicConnectionApp" # client application type
*.users[0].app[0].localPort = 5000 # destination port
*.users[0].app[0].destAddresses = "server"
*.users[*].app[0].destPort = 6000
*.users[*].app[0].messageLength = 100B
*.users[*].app[0].sendInterval = 10s
*.users[*].app[0].startTime = 0s # Important! Otherwise, it start only after sendInterval (no idea why, to debug)
*.users[*].app[0].packetName = "UDPData-client"
*.users[*].app[0].newLocInterface = "wlan0" # from which Interface to pick up Loc changes
*.users[*].app[0].oldLocInterface = "wlan1" # pick up unreachability of old Loc
*.server.numApps = 1 # number of applications on server
*.server.app[0].typename = "UdpBasicConnectionApp" # server application type
*.server.app[0].localPort = 6000 # destination port
*.server.app[0].destAddresses = "users[*]"
*.server.app[0].destPort = 5000
*.server.app[0].messageLength = 100B
*.server.app[0].sendInterval = exponential(1s)
*.server.app[0].packetName = "UDPData"

[WirelessParams]
extends = PrototypeNetwork
# radio
**.wlan[*].typename = "AckingWirelessInterface" # "WirelessInterface"
# shortcutmac doesn't work, because physical properties like distance NEED to be checked
**.wlan[*].mac.useAck = true 											# https://inet.omnetpp.org/docs/tutorials/wireless/doc/step1.html
**.wlan[*].mac.fullDuplex = true
**.wlan[*].bitrate = 100000000 Mbps
**.wlan[*].mac.ackTimeout = 300ms
**.radio.typename = "UnitDiskRadio" # do we want to set this?
**.wlan[*].radio.transmitter.communicationRange = 90m
**.wlan[*].radio.receiver.ignoreInterference = true
*.users[*].numWlanInterfaces = 2 # newLoc (wlan[0]) and oldLoc (wlan[1])

*.routersAlongPath[*].numWlanInterfaces = 1
*.routersAlongPath[*].**.radio.displayCommunicationRange = true

#*.radioMedium.propagation.typename = "ConstantTimePropagation"
#*.radioMedium.propagation.propagationTime = 0.2s
*.radioMedium.rangeFilter = 'communicationRange' # enhance scalibility - doens't seem to work
*.radioMedium.macAddressFilter = true # enhance scalibility by only sending to intended recipients

[MobilityParams]
extends = PrototypeNetwork
# mobility
*.users[*].mobility.typename = "LinearMobility"
*.users[*].**.initialY = 150m + uniform(-20m,20m)
**.mobility.speed = 25mps
**.mobility.initialMovementHeading = 180deg*intuniform(0,1)

*.routersAlongPath[*].**.initialY = 100m
*.routersAlongPath[0].**.initialX = 100m
*.routersAlongPath[1].**.initialX = 150m
*.routersAlongPath[2].**.initialX = 200m
*.routersAlongPath[3].**.initialX = 250m
*.routersAlongPath[4].**.initialX = 300m
**.initFromDisplayString = false

**.constraintAreaMinX = 0m
**.constraintAreaMaxX = 400m
**.constraintAreaMinY = 0m
**.constraintAreaMaxY = 400m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxZ = 0m

[VisualizationParams]
*.visualizer.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.mobilityVisualizer.displayPositions = true
*.visualizer.mobilityVisualizer.displayOrientations = true
*.visualizer.mobilityVisualizer.displayVelocities = false
*.visualizer.mobilityVisualizer.displayMovementTrails = false

*.visualizer.mediumVisualizer.displaySignals = false
*.visualizer.mediumVisualizer.displaySignalDepartures = false
*.visualizer.mediumVisualizer.displaySignalArrivals = false
*.visualizer.dataLinkVisualizer.displayLinks = false
*.visualizer.physicalLinkVisualizer.displayLinks = false
*.visualizer.networkRouteVisualizer.displayRoutes = false
*.visualizer.*LinkVisualizer.lineShift = 0
*.visualizer.networkRouteVisualizer.lineShift = 0
#*.visualizer.*Visualizer.packetFilter = "UDPData*"

*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.interfaceTableVisualizer.nodeFilter = "not (*switch* or *Switch* or *AP*)"
**.interfaceTable.displayAddresses = false

*.visualizer.routingTableVisualizer.displayRoutingTables = true
*.visualizer.routingTableVisualizer.destinationFilter = "users[0]"
*.visualizer.routingTableVisualizer.lineShiftMode = "none"

[IPv4AddressAssignment]
extends = End2EndApplication
*.configurator.addStaticRoutes = false # only depend on dynamic routing protocol
# **.routingTable.netmaskRoutes = ""
*.configurator.dumpRoutes = true
*.configurator.dumpTopology = true
*.configurator.assignDisjunctSubnetAddresses = false
*.configurator.config = xmldoc("hierarchical_DHCP.xml")
# AdjMgmt server in routers
*.routersAlongPath[*].numApps = 1
*.routersAlongPath[*].app[0].typename = "AdjacencyManagerServer"
*.routersAlongPath[*].app[0].newLocInterface = "wlan0"
#*.routersAlongPath[*].dhcp.numReservedAddresses = 2 # number of addresses to skip at the start of the network's address range
#*.routersAlongPath[*].dhcp.leaseTime = 2s
# AdjMgmt in hosts
*.users[*].numApps = 2 # overrides [End2EndApplication]
*.users[*].app[1].typename = "AdjacencyManagerClient"
*.users[*].app[1].newLocInterface = "wlan0"
*.users[*].app[1].oldLocInterface = "wlan1"
*.users[*].app[1].getLocInterval = 0.1s
**.hasUdp = true # always enable UDP
# FIXME: delay for none-overlap.
# This fixes the fact that DHCP packets are dropped at the radio due to almost same arrival time
# could this be solved by changing AckingWirelessInterface? Or let DHCP be more robust...
#*.users[1].app[1].startTime = 0.1s
#*.users[2].app[1].startTime = 0.2s
# delay other applications

[AddressAssignment]
extends = IPv4AddressAssignment

[Prototype_4G_wifi_static]
extends = AddressAssignment, End2EndApplication, WirelessParams, MobilityParams, VisualizationParams
*.configurator.addStaticRoutes = true # only depend on dynamic routing protocol

[Prototype_4G_wifi_ospf]
extends = End2EndApplication, WirelessParams, MobilityParams, VisualizationParams
*.configurator.addStaticRoutes = false
*.visualizer.routingTableVisualizer.destinationFilter = ""

# routing
**.hasOspf = true
*.users[*].routing.typename = "OspfWithManetInterface"
#**.ospf.helloInterval = 3s # default(10s);  // specifies the time in seconds between hello packets that the other router sends on an interface
#**.ospf.pollInterval = 10s # default(120s);  // specifies the length of time, in seconds, between OSPF packets that the router send before adjacency is established with a neighbor
#**.ospf.routerDeadInterval = 5s # default(40s);  // the interval during which at least one hello packet must be received from a neighbor before the router declares that neighbor as down
#**.ospf.retransmissionInterval = 1s # default(5s);  // The time between OSPF LSA retransmissions for adjacencies that belongs to the interface
# *.users[*].routing.ospf.interfaceTableModule = "^.interfaceTable"
# *.users[*].routing.ospf.routingTableModule = "^.ipv4.routingTable"

[Prototype_4G_wifi_dymo]
extends = AddressAssignment, WirelessParams, MobilityParams, VisualizationParams # End2EndApplication
#*.users[*].routing.typename = "Dymo"
#*.routersAlongPath[*].
#*.server*.
#*.users[*].routing.ospf.interfaceTableModule = "^.^.interfaceTable"
#*.users[*].routing.ospf.routingTableModule = "^.^.ipv4.routingTable"

[Prototype_4G_wifi_large_medium]
extends = WirelessParams, MobilityParams, VisualizationParams, End2EndApplication
**.wlan[*].radio.transmitter.communicationRange = 40m
*.node*.numWlanInterfaces = 1
















[Prototype_train]
network = PrototypeTrain
*.numPassengers = 4
*.numRoutersAlongTrainTrack = 5
**.hasOspf = true
**.interfaceTable.displayAddresses = false

*.routersAlongTrack[*].numWlanInterfaces = 1
*.routersAlongTrack[*].**.initialY = 140m
*.routersAlongTrack[*].**.initFromDisplayString = false

*.trainTransceiver.numWlanInterfaces = 1

# radio
**.wlan[*].typename = "WirelessInterface" # "AckingWirelessInterface"
**.wlan[*].mac.typename = "ShortcutMac" # with "WirelessInterface"
**.radio.typename = "UnitDiskRadio"
**.transmitter.communicationRange = 100m
**.radio.displayCommunicationRange = true
**.wlan[*].bitrate = 5000bps
**.wlan[*].**.bitrate = 50000bps

# mobility
*.trainTransceiver.mobility.typename = "LinearMobility"
**.mobility.speed = 40mps
**.mobility.initialMovementHeading = 0deg

*.passenger[*].numApps = 1 # number of applications on clients
*.passenger[*].app[0].typename = "TcpSessionApp" # client application type
*.passenger[*].app[0].connectAddress = "server" # destination address
*.passenger[*].app[0].connectPort = 1000 # destination port
*.passenger[*].app[0].sendBytes = 100B # amount of data to send
*.server.numApps = 1 # number of applications on server
*.server.app[0].typename = "TcpEchoApp" # server application type
*.server.app[0].localPort = 1000 # TCP server listen port